name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  id-token: write
  contents: read
  attestations: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24.2'

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

      - name: Install dependencies
        run: |
          for d in acme-server ca-service cli device-service signing-service transparency-log-service; do
            echo "Installing dependencies in $d"
            (cd "$d" && go mod tidy)
          done

      - name: Format Go code
        run: |
          for d in acme-server ca-service cli device-service signing-service transparency-log-service; do
            echo "Formatting $d"
            (cd "$d" && go fmt ./...)
          done

      - name: Vet Go code
        run: |
          for d in acme-server ca-service cli device-service signing-service transparency-log-service; do
            echo "Vetting $d"
            (cd "$d" && go vet ./...)
          done

      - name: Build services
        run: |
          mkdir -p bin
          go build -o bin/ca-service ./ca-service
          go build -o bin/acme-server ./acme-server
          go build -o bin/device-service ./device-service
          go build -o bin/signing-service ./signing-service
          go build -o bin/cli ./cli
          go build -o bin/transparency-log-service ./transparency-log-service

      - name: Generate self-signed TLS cert
        run: |
          openssl req -x509 -nodes -newkey rsa:2048 \
            -keyout tls.key -out tls.crt -days 1 \
            -subj "/CN=localhost"

      - name: Start ca-service with PQ KEM
        run: |
          ./bin/ca-service --tls-cert tls.crt --tls-key tls.key --addr ":8443" &
          echo $! > ca.pid

     

          func main() {
            cfg := &tls.Config{
              InsecureSkipVerify: true,
              CurvePreferences:   []tls.CurveID{tls.X25519MLKEM768},
            }
            conn, err := tls.Dial("tcp", "localhost:8443", cfg)
            if err != nil {
              fmt.Fprintln(os.Stderr, "handshake failed:", err)
              os.Exit(1)
            }
            if conn.ConnectionState().NamedCurve != tls.X25519MLKEM768 {
              fmt.Fprintln(os.Stderr, "wrong group:", conn.ConnectionState().NamedCurve)
              os.Exit(2)
            }
            fmt.Println("âœ… negotiated X25519MLKEM768")
          }
          EOF
          go run pqkem_test.go

      - name: Tear down ca-service
        if: always()
        run: |
          kill $(cat ca.pid) || true

      - name: Run tests
        run: |
          for d in acme-server ca-service cli device-service signing-service transparency-log-service; do
            echo "Running tests in $d"
            (cd "$d" && go test ./...)
          done

      - name: Anchore SBOM Action
        uses: anchore/sbom-action@v0.18.0
        with:
          output-file: sbom.json

      - name: Attest SLSA provenance
        uses: actions/attest-build-provenance@v2
        with:
          subject-path: sbom.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.json

      - name: Upload provenance
        uses: actions/upload-artifact@v4
        with:
          name: provenance
          path: attestations/*.intoto.jsonl